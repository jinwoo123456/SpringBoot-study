<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper 파일을 구성하기 위한 Doctype 설정. -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.edu.springboot.jdbc.IMemberService">


<!-- 	<select id="select"
	resultType="com.edu.springboot.jdbc.MemberDTO">
	select * from member order by regidate desc
	</select> -->
	
	<!-- 조건문은 if 태그로 정의 : test에 조건을 추가한다. 사용법은 JSTL과 동일하다.
	 test="searchKeyword!=null and !searchKeyword.equals('')"
	 파라미터 형식이 
	 1.요청명?searchKeyword=xxxx -> 값이 있음
	 2.요청명?searchKeyword=	   -> 빈값으로 지정됨. ''로 체크해야함.
	 3.요청명? 				   ->  null로 지정됨.             
	 
	 반복문은 <foreach>태그로 정의
	 collection : 반복을 위해 사용할 컬렉션 변수명 지정
	 item : 반복시 해당 루프에서 반환되는 객체를 저장
	 open : 쿼리문 시작 부분에서 추가할 문자열
	 close : 쿼리문 종료 부분에 추가할 문자열
	 separator : 쿼리문 반복시 구분자로 사용할 항목
	 --> 
 	<select id="select" parameterType="com.edu.springboot.jdbc.MemberDTO"
 	resultType="com.edu.springboot.jdbc.MemberDTO">
 	select * from member
 	<if test="searchKeyword!=null and !searchKeyword.equals('')">
 	where
 	<foreach collection="searchField" item="sfield" open="(" close=")"
 	separator="or">
 	${sfield} like '%'||#{searchKeyword}||'%'
 	</foreach>
 	</if>
 	order by regidate desc
 	<!-- 
 	위의 쿼리문을 완성하면 아래와 같다.
 	 	select * from member
 		where (id, like '%검색%' or name like '%검색%')
 		order by regidate desc
 	 -->
 	</select>
	
	
	<!-- 회원등록: request 내장객체를 통해 받은 파라미터를 개별적으로 전달한 값으로
	인파라미터를 채워준다. 이 경우 DTO와 같은 클래스를 사용하지 않으므로
	parameterType은 명시하지 않는다.전달되는 3개의 인수는 순서대로 praram1,2,3과 같이
	기술한다. -->
	<insert id="insert">
	  insert into member (id,pass,name) 
	  values (#{param1}, #{param2}, #{param3})
	</insert>
	<!-- 
	회원정보 인출하기: 파라미터를 @Param 어노테이션으로 변경한 후 전달하므로
	변경된 이름으로 인파라미터를 설정한다. -->
 	<select id="selectOne"
 	resultType="com.edu.springboot.jdbc.MemberDTO">
 	select * from member where id=#{_id}
 	</select>
 	<!-- 
 	수정처리 : Map에 저장된 파라미터를 받으므로 parameterType에 Map을
 	명시한다. Map은 자바의 기본클래스이지만 패키지의 풀경로를 명시해야한다.
 	그리고 Ket로 저장된 값을 얻어온 후 인파라미터를 설정한다. -->
 	<update id="update"
 	parameterType="java.util.HashMap">
 	update member set pass=#{m_pass},
 	name=#{m_name} where id=#{m_id}</update>

	<!-- 
	삭제처리 : 파라미터 순서대로 배열처럼 0,1,2 와 같이 인파라미터를 설정할 수 있다.
	 -->
	<delete id="delete">
	delete from member where id=#{0}
	</delete>
	
</mapper>